// =================================================================
// Accessibility Tools
// Requires MathSass.
// =================================================================

/// Calculates linear color channel values, for use in
/// accessibility contrast calculations.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
/// Based on Sérgio Gomes's accessibility work.
///
/// Algorithm, for c in 0 to 255:
///
/// f(c) {
///   c = c / 255;
///   return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
/// }
///
/// More info: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
/// @author Sérgio Gomes
/// @group accessibility
/// @access private
/// @since 3.2.0

@function linear-color-channel( $color ) {
	$color: $color / 255;
	$channel-value: 0;

	@if( $color < 0.03928 ) {
		$channel-value: $color / 12.92;
	} @else {
		$channel-value: pow( ($color + 0.055) / 1.055, 2.4 );
	}

  @return $channel-value;
}

/// Calculates the luminance of a color, for use in
/// accessibility contrast calculations.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
/// Based on Sérgio Gomes's accessibility work.
///
/// More info: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
/// @author Sérgio Gomes
/// @group accessibility
/// @access private
/// @since 3.2.0

@function luminance( $color ) {
  $red: linear-color-channel( red( $color ) + 1 );
  $green: linear-color-channel( green( $color ) + 1 );
  $blue: linear-color-channel( blue( $color ) + 1 );

  @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

/// Calculates the luminance of a color, for use in
/// accessibility contrast calculations.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
/// Based on Sérgio Gomes's accessibility work.
///
/// More info: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
/// @author Sérgio Gomes
/// @group accessibility
/// @access private
/// @since 3.2.0

@function contrast( $back, $front ) {
  $backLum: luminance( $back ) + .05;
  $foreLum: luminance( $front ) + .05;

  @return max( $backLum, $foreLum ) / min( $backLum, $foreLum );
}

/// Returns WCAG-compliant text colors automatically, based on a
/// desired background and foreground color, by lightening or
/// darkening the text color until it meets compliance standards.
///
/// By default, the compliance method is set to AA, but you can
/// pass an optional compliance method argument to support AAA.
///
/// @example
/// 		Automatically fix a link text color to be AA compliant
///		based on the background color of widgets.
/// 			.widget a {
///				color: accessible-text( $widget-bg, $color-secondary );
///			}
///
/// @author Ashley Kolodziej
/// @group accessibility
/// @access public
/// @since 3.2.0

@function accessible-text( $background, $some-color, $compliance-method: 'AA' ){
  $contrast: contrast( $background, $some-color );
  $final-color: $some-color;
  $lighten: lightness( $background ) > lightness( $some-color ); // Whether to lighten or darken the text color.
  $required-contrast: 4.5; // Assumes AA usage.

  @if $compliance-method == 'AAA' {
    $required-contrast: 7;
  }

  @while $contrast < $required-contrast {
    @if $lighten {
      $final-color: lighten( $final-color, 1% );
    } @else {
      $final-color: darken( $final-color, 1% );
    }

    $contrast: contrast( $background, $final-color );
  }

  @return $final-color;
}
