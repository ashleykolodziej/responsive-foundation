// =================================================================
// Mixins & Extends
// =================================================================

/// Clears floats on a container.
/// Use when an element contains floated items and
/// isn't getting the correct height because it doesn't
/// recognize the height of the floated child items.
/// Based on Nicolas Gallagher's micro clearfix.
/// More info: http://nicolasgallagher.com/micro-clearfix-hack/
/// @example
/// 		Clear degree items in a degree programs panel so
/// 		the degree programs background is applied properly.
/// 			.degree-programs {
///				@extend %clearfix;
///				background: $color-grayscale-0;
///			}
///
/// 			.degree-item {
///				@extend %col-md-quarter;
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

%clearfix {
	&::after {
		display: table;
		clear: both;
		content: "";
	}
}

/// A mixin for border-radius. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing border-radius rules to ensure you're
/// compatible with the browsers we support. Accepts
/// arguments in the same syntax as standard CSS.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius
/// @example
/// 		Create a round profile image for a callout.
/// 		the degree programs background is applied properly.
/// 			.profile-callout-image {
///				@include border-radius( 50% );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin border-radius( $radius ) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

/// A mixin for box-shadow. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing box-shadow rules to ensure you're
/// compatible with the browsers we support.
/// Supports multiple shadows, just use the same syntax
/// as you would CSS.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow
/// @example
/// 		Create a large, subtle shadow to help a callout
/// 		stand out against a complicated background, like
/// 		a background photo.
/// 			.feature-callout {
///				@include box-shadow( 0px 0px 40px 0px rgba( 0, 0, 0, 0.25 ) );
///			}
///
/// 		Create a fancy button with an inset highlight and
/// 		a shadow around it to help it stand out on a background.
/// 		a background photo.
/// 			.fancy-button {
///				@include box-shadow(
///					inset 0 2px 0px rgba( 255, 255, 255, 0.25 ),
///					0px 0px 10px 0px rgba( 0, 0, 0, 0.25 )
///				);
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin box-shadow( $shadow... ) {
	-webkit-box-shadow: $shadow;
	-moz-box-shadow: $shadow;
	-ms-box-shadow: $shadow;
	-o-box-shadow: $shadow;
	box-shadow: $shadow;
}

/// A mixin for linear gradients. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing linear gradients rules to ensure you're
/// compatible with the browsers we support.
/// Always to supply a backup background color as well
/// for browsers that do not support gradients.
/// Does not support multiple gradients - you're on your
/// own for that.
/// @example
/// 		Create a fancy button with a subtle downward gradient.
/// 			.fancy-button {
///				@include linear-gradient( transparent, darken( $your-color, 10% ) );
///				background-color: $your-color;
///			}
/// @group mixins
/// @access public
/// @since 1.2.0

@mixin linear-gradient( $from-color: NULL, $to-color: NULL ) {
	// Both variables must be defined colors
	@if (
			type_of( $from-color ) == color and
			type_of( $to-color ) == color
		) {
		background-image: -webkit-gradient(linear, left top, left bottom, from( $from-color), to( $to-color)); // Saf4+, Chrome
		background-image: -webkit-linear-gradient(top, $from-color, $to-color); // Chrome 10+, Saf5.1+, iOS 5+
		background-image: -moz-linear-gradient(top, $from-color, $to-color); // FF3.6
		background-image: -ms-linear-gradient(top, $from-color, $to-color); // IE10
		background-image: -o-linear-gradient(top, $from-color, $to-color); // Opera 11.10+
		background-image: linear-gradient(top, $from-color, $to-color);
		filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$from-color}', EndColorStr='#{$to-color}');
	} @else {
		@error 'The linear gradient mixin requires two valid colors or variables which hold colors. \a Example usage: @include linear-gradient( $from-color, $to-color);';
	}
}

/// A mixin for opacity. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing opacity rules to ensure you're
/// compatible with the browsers we support. Accepts
/// arguments in the same syntax as standard CSS.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/opacity
/// @example
/// 		Fade a thumbnail until it's hovered over.
/// 			.gallery-thumbnail {
///				@include opacity( 0.5 );
///
///				&:hover {
///					@include opacity( 1 );
///				}
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin opacity( $opacity: NULL ) {
	@if ( $opacity <= 1 ) {
		$opacity-ie: $opacity * 100;
		opacity: $opacity;
		filter: alpha(opacity=$opacity-ie); //IE8
	} @else if ( type_of( $opacity ) == string ) { // Accounts for initial, inherit, unset
		opacity: $opacity;
	} @else {
		@error 'Opacity must be specified as a decimal value. \a Example usage: @include opacity( 0.5 );';
	}
}

/// A mixin for transition. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing transition rules to ensure you're
/// compatible with the browsers we support.
/// Supports multiple transitions, just use the same syntax
/// as you would CSS. Please note: you should avoid trasition `all`,
/// as it can become a significant performance issue on older devices.
/// The cheapest properties to animate performance-wise are `transform`,
/// `opacity`, and `filter` -  if you're not sure what you're doing, it's
/// best to stick to those where possible.
/// Learn how to test animation performance: https://www.sitepoint.com/check-css-animation-performance-with-the-browsers-dev-tools/
/// Syntax info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transition
/// @example
/// 		Transition the opacity on a lightbox when it is opened.
/// 			.lightbox-overlay {
///				@include opacity( 0 );
///				@include transition( opacity 250ms ease-in-out 0s );
///
///				&.open {
///					@include opacity( 1 );
///					@include transition( opacity 250ms ease-in-out 0s );
///				}
///			}
///
/// 		Transition multiple properties between hidden and visible item states
///		for a filter and ensure that certain properties are applied to the
///		animation immediately using the `step-start` timing function.
/// 		Note the delay on opacity.
/// 			.degree-program-hidden {
///				@include opacity( 0 );
///				@include scale( 1, 0 );
///				z-index: 1;
///
///				@include transition(
///					opacity 250ms ease-in-out .2s,
///					transform 250ms ease-in-out 0s,
///					z-index 0s step-start 0s
///				);
///			}
/// 			.degree-program-visible {
///				@include opacity( 1 );
///				@include scale( 1, 1 );
///				z-index: 2;
///
///				@include transition(
///					opacity 250ms step-end .2s,
///					transform 250ms ease-out 0s,
///					z-index 0s step-start 0s
///				);
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin transition( $transitions... ) {
	-webkit-transition: $transitions;
	-moz-transition: $transitions;
	-ms-transition: $transitions;
	-o-transition: $transitions;
	transition: $transitions;
}

/// A mixin for transform. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing transform rules to ensure you're
/// compatible with the browsers we support.
/// Supports multiple transforms, just use the same syntax
/// as you would CSS.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform
/// @example
/// 		Move a callout.
/// 			.callout {
///				@include transform( translateX( 100px ) );
///			}
/// 		Move and rotate a callout.
/// 			.callout-selected {
///				@include transform(
///					translateX( 100px )
///					translateY( 20px )
///					rotate( 20deg )
///				);
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin transform( $transforms ) {
	-webkit-transform: $transforms;
	-moz-transform: $transforms;
	-ms-transform: $transforms;
	-o-transform: $transforms;
	transform: $transforms;
}

/// A shorthand mixin for rotate. Takes care of browser
/// prefixes for you. You could use `transform` as well.
/// Accepts an amount of degrees to rotate by.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform
/// @example
/// 		Rotate a callout 90 degrees.
/// 			.callout {
///				@include rotate( 90 );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin rotate( $deg ) {
	@include transform( rotate( #{$deg}deg ) );
}

/// A shorthand mixin for scale. Takes care of browser
/// prefixes for you. You could use `transform` as well.
/// Accepts an amount of degrees to rotate by.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform
/// @example
/// 		Scale a callout to double its size.
/// 			.callout {
///				@include scale( 2 );
///			}
/// 		Scale the height of a filtered item from 0 to the full height when visible.
/// 			.degree-program {
///				@include scale( 0, 0 );
///
///				&.visible {
///					@include scale( 0, 1 );
///				}
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin scale( $scale ) {
	@include transform( scale( $scale ) );
}

/// A shorthand mixin for translate. Takes care of browser
/// prefixes for you. You could use `transform` as well.
/// Accepts two arguments: an amount to translate X by, and
/// an amount to translate Y by.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform
/// @example
/// 		Move a callout 10px to the left.
/// 			.callout {
///				@include translate( -10px, 0 );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin translate( $x, $y ) {
	@include transform( translate( $x, $y ) );
}

/// A mixin for transform-origin. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing transform-origin rules to ensure you're
/// compatible with the browsers we support.
/// Use with `transform`, `rotate`, `scale`, or `translate`
/// to tell the browser where the transform should start from.
/// Accepts any valid CSS value for `transform-origin`.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin
/// @example
/// 		Scale the height of a filtered item from 0 to the full height when visible
///		and start the transform from the top of the item.
/// 			.degree-program {
///				@include scale( 0, 0 );
///				@include transform-origin( top );
///
///				&.visible {
///					@include scale( 0, 1 );
///				}
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin transform-origin( $origin ) {
	-webkit-transform-origin: $origin;
	-moz-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-o-transform-origin: $origin;
	transform-origin: $origin;
}

/// A mixin for keyframes. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing keyframe rules to ensure you're
/// compatible with the browsers we support.
/// Use with `animation` to build complex animations
/// that `transition` isn't capable of alone and to tightly
/// control timing.
/// Accepts any valid CSS value for `keyframes`.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes
/// @example
/// 		Create an infinite loading animation which completes every 250ms
///		using keyframes and animation.
/// 			@include keyframes( infinite-loader ) {
/// 				from {
/// 					transform: rotate( 0deg );
/// 				}
/// 				to {
/// 					transform: rotate( 360deg );
/// 				}
/// 			}
///
/// 			.loading {
///				@include animation( infinite-loader 250ms infinite );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin keyframes( $animation-name ) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}

/// A mixin for animation. Takes care of browser
/// prefixes for you. You should always use this mixin
/// when writing animation rules to ensure you're
/// compatible with the browsers we support.
/// Use with `keyframes` to build complex animations
/// that `transition` isn't capable of alone and to tightly
/// control timing.
/// Accepts any valid CSS value for `animation`, including
/// multiple animation declarations.
/// More info at MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/animation
/// @example
/// 		Create an infinite loading animation which completes every 250ms
///		using keyframes and animation.
/// 			@include keyframes( infinite-loader ) {
/// 				from {
/// 					transform: rotate( 0deg );
/// 				}
/// 				to {
/// 					transform: rotate( 360deg );
/// 				}
/// 			}
///
/// 			.loading {
///				@include animation( infinite-loader 250ms infinite );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

@mixin animation( $keyframe-animations... ) {
	-webkit-animation: #{$keyframe-animations};
	-moz-animation: #{$keyframe-animations};
	-ms-animation: #{$keyframe-animations};
	-o-animation: #{$keyframe-animations};
	animation: #{$keyframe-animations};
}

// vertical-center: a more IE-friendly version of vertical center. Apply "vertical-center-child-legacy" to a parent element and "vertical-center" to the child
// Default usage: @include vertical-center-child-legacy;
// Usage specifying a child selector: @include vertical-center-child-legacy(".yourSelector");
@mixin vertical-center-child-legacy( $selector: "*" ) {
	.lt-ie9 & {
		display: table;
	}
	.lt-ie9 & > #{$selector} {
		top: auto;
		display: table-cell;
		vertical-align: middle;
	}
	& > #{$selector} {
		position: relative;
		top: 50%;
		display: block;
		-webkit-transform: translateY(-50%);
			-moz-transform: translateY(-50%);
			 -ms-transform: translateY(-50%);
				  transform: translateY(-50%);
	}
}
// Usage: @include vertical-center
@mixin vertical-center-legacy {
	position: relative;
	top: 50%;
	-webkit-transform: translateY(-50%);
		-moz-transform: translateY(-50%);
		 -ms-transform: translateY(-50%);
			  transform: translateY(-50%);
	.lt-ie9 & {
		top: auto;
	}
}

/// Hides text in an element visually, but preserves width and height
/// and screen reader visibility. Use this placeholder to hide text when
/// you need a visual representation of the screen reader text,
/// but the text itself isn't desirable to have in your design,
/// such as in a logo. For example, this placeholder is used to
/// hide the text on the BU masterplate and BUMC logo in the footer.
/// In cases where there is no visual component to worry about,
/// %visually-hidden is preferred because it supports right-to-left
/// languages and will be safer if a site is ever translated.
/// More info on this technique: http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
/// @example
/// 		Hide text on a logo using a background image.
/// 			.custom-logo {
///				@extend %hide-text;
///				background-image: url( "images/your-image.jpg" );
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

%hide-text {
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}

/// Hides entire elements visually, but preserves visibility for
/// screen readers. Use this placeholder when an element is only
/// for screen readers and needs no visual representation on the site.
/// This is the preferred method of hiding items visually as it works
/// with right-to-left languages, making it a safer choice if a site is
/// ever translated.
/// More info on this technique: http://a11yproject.com/posts/how-to-hide-content/
/// @example
/// 		Hide a label in a button.
/// 			.fancy-button-label {
///				@extend %visually-hidden;
///			}
/// @group mixins
/// @access public
/// @since 1.0.0

%visually-hidden {
	border: 0;
	clip: rect( 0, 0, 0, 0 ); // Deprecated. Remove when clip-path support is better.
	clip-path: inset( 50% );
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

/// Reverses `%visually-hidden`. Helpful if you want to
/// unhide a previously hidden label.
/// @example
/// 		Show a previously hidden label for all users.
/// 			.fancy-button-label {
///				@extend %remove-visually-hidden;
///			}
/// @group mixins
/// @access public
/// @since 2.0.0

%remove-visually-hidden {
	clip: auto;
	clip-path: none;
	height: auto;
	margin: 0;
	overflow: visible;
	position: static;
	width: auto;
}

// If primary stylesheet indicates media query support (e.g. style.scss ), output media queries. If not (e.g. ie.scss ), output the block WITHOUT @media wrapper.
// Usage: @include breakpoint( md ) {...}
// $skiplgMQforIE tells this mixin whether or not to skip the lg point styles on THIS set of styles for IE8.
// If you have an individual set of styles for the large breakpoint that you need to print, this allows you to do it.
// Realistically, you probably don't need it.
// TODO: check out if http://sassbreak.com/getting-back-to-our-roots/ helps with mqs for IE
// It looks like it can print styles at the root if MQs aren't supported, maybe.

@mixin breakpoint( $point, $skiplgMQsforIE: true ) {
	// Error handling for anyone upgrading to 1.2.0
	@if (
		$point == extra_small or
		$point == small or
		$point == medium or
		$point == large
	) {
		@error 'The breakpoint shorthand "#{$point}" is no longer supported as of Responsive 1.2.0. Use "xs", "sm", "md", or "lg" instead.';
	}
	@if ( $mqs ) {
		@if ( $point == xs ) {
			@media screen and ( min-width: $xs ) {
				@content;
			}
		} @else if ( $point == sm ) {
			@media screen and ( min-width: $sm ) {
				@content;
			}
		} @else if ( $point == md ) {
			@media screen and ( min-width: $md ) {
				@content;
			}
		} @else if ( $point == lg ) {
			@media screen and ( min-width: $lg ) {
				@content;
			}
		} @else if ( $point == xl ) {
			@media screen and ( min-width: $xl ) {
				@content;
			}
		} @else {
			// Can also accept your very own min-width argument, like so:
			// "min-width: 300px;"
			// "max-width: 900px;"
			// Keep in mind these print for all sizes if MQs aren't supported.
			@media screen and ( $point ) {
				@content;
			}
		}
	} @else {
		@if ( $point == lg and $skiplgMQsforIE ) {
			// ie8 and large desktop output nothing
		} @else {
			@content;
		}
	}
}

/// Outputs a sass map neatly in CSS for debugging purposes.
/// From https://www.sitepoint.com/debugging-sass-maps/
/// @group mixins
/// @access public
/// @since 2.0.0

@mixin debug-map( $map ) {
	@at-root {
		@debug-map {
			__toString__: inspect( $map );
			__length__: length( $map );
			__depth__: depth( $map );
			__keys__: map-keys( $map );
			__properties__ {
				@each $key, $value in $map {
					#{"(" + type-of( $value ) + ") " + $key}: inspect( $value );
				}
			}
		}
	}
}

// Media query for retina images
// Usage: @include retina {...}
@mixin retina {
	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and ( min--moz-device-pixel-ratio: 2),
	only screen and ( -o-min-device-pixel-ratio: 2/1),
	only screen and ( min-device-pixel-ratio: 2),
	only screen and ( min-resolution: 192dpi),
	only screen and ( min-resolution: 2dppx) {
		@content;
	}
}

// Mixin to generate RGBA colors for any style with a fallback for non-rgba browsers such as IE8.
// Usage: @include rgba-color('background-color', rgba(black, 0.5), white);
@mixin rgba-color( $attribute: NULL, $color: NULL, $background: NULL ) {
	@if (
		type_of( $attribute ) == string and
		type_of( $color ) == color and
		type_of( $background ) == color
	) {
		$percent: alpha( $color ) * 100%;
		$opaque: opacify( $color, 1 );
		$solid-color: mix( $opaque, $background, $percent );

		#{$attribute}: $solid-color;
		#{$attribute}: $color;
	} @else {
		@error 'The rgba-color mixin requires a valid CSS attribute to apply the color to, a valid RGBA color, and a valid fallback color. \a Example usage: @include rgba-color(\'background-color\', rgba(black, 0.5), white);';
	}
}

// Help for mixins so it's easier to see syntax - prints to console on each save
// Usage: @include mixin-help

@mixin mixin-help {
	@debug '\a\a\a Quick guide to Responsive mixins: \a\a border-radius: @include border-radius(3px); \a box-shadow: @include box-shadow(0 0 1px 3px #000000); \a linear-gradient: @include linear-gradient( $fromColor, $to-color); \a opacity: @include opacity(0.5); \a transition: @include transition(all, 250ms, ease-in-out, 0s ); \a transform: @include(any valid CSS transform argument); \a rotate: @include rotate(90); \a scale: @include scale(2); \a translate: @include translate(10px, 20px); \a keyframes: @include keyframes(animationName) { ... } ; \a animation: @include animation(animationName); \a vertical-center: @include vertical-center in the element you want to center \a vertical-center (IE friendly): @include vertical-center-child-legacy(.childElement) in the parent class \a breakpoint: @include breakpoint( md ) { ... } \a retina:  @include retina { ... } \a rgba-color: @include rgba-color(\'background-color\', rgba(someColor, 0.5), fallbackColor); \a\a';
}