/* grid
----------------------------------------------------------------- */

.wrapper {
	overflow:hidden;
}
.content {
	position:relative;
}
.container {
	@extend %clearfix;
	padding: $grid-container-padding;
	width: 100%;
	margin: 0 auto;

	@include breakpoint(small) {
		max-width: $container-S;
		padding: $grid-container-padding-largeScreen;
	}
	@include breakpoint(medium) {
		max-width: $container-M;
	}
	@include breakpoint(large) {
		max-width: $container-L;
	}
}
.row {
	margin: $grid-row-margin;
}
.row [class*="col-"] {
	padding: $grid-column-padding;
}
.row:before,
.row:after {
display: table;
content: " ";
}
.row:after {
clear: both;
}
.row .row:nth-last-of-type(1) {
margin-bottom: 0;
}

/* ---------------------------------------------------------------

Grid placeholders

Builds placeholder classes for the grid.
Available classes follow the pattern below:

Friendly classes for common column needs (all start at medium breakpoint):
	@extend %col-half;
	@extend %col-third;
	@extend %col-quarter;

For your less obvious grid needs:
	Basic usage:
		@extend %col-xs-3;
	Half column that starts only at medium breakpoints (half of 12):
		@extend %col-medium-6;
	Position 1 column to the left starting at large breakpoint (does not affect document flow):
		@extend %col-large-push-12;
	Push 1 column to the left starting at large breakpoint (affects document flow):
		@extend %col-large-offset-12;
	Position 1 column to the right starting at large breakpoint:
		@extend %col-large-pull-12;

----------------------------------------------------------------- */

// Variables which control the grid. Adjust columns and breakpoints to support here.
$grid-number-columns: 12;
$grid-breakpoints: "small", "medium", "large";

// A helper mixin to build grid styles. No need to use outside this file.
@mixin gridBuild($cssproperty, $amount) {
	#{$cssproperty}: #{$amount}#{"%"};
}

%col-base {
	position: relative;
	min-height: 1px;
}

@for $i from 1 through $grid-number-columns {
	// Determine current width
	$percentage: ($i / $grid-number-columns)*100;

	// Mobile grid styles
	%col-xs {
		&-#{$i} {
			@extend %col-base;
			@include gridBuild(width, $percentage);
		}
	}
	// Responsive grid styles
	@each $breakpoint in $grid-breakpoints {
		%col-#{$breakpoint} {
			&-#{$i} {
				@extend %col-base;
			}
			@include breakpoint($breakpoint) {
				&-#{$i} {
					@include gridBuild(width, $percentage);
					float: left;
				}
				&-push-#{$i} {
					@include gridBuild(left, $percentage);
				}
				&-pull-#{$i} {
					@include gridBuild(right, $percentage);
				}
				&-offset-#{$i} {
					@include gridBuild(margin-left, $percentage);
				}
			}
		}
	}
}

%col-half {
	@extend %col-medium-#{($grid-number-columns / 2)};
}
%col-third {
	@extend %col-medium-#{($grid-number-columns / 3)};
}
%col-quarter {
	@extend %col-medium-#{($grid-number-columns / 4)};
}