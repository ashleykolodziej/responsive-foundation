// =================================================================
// Grid
// =================================================================

// TODO: Needs documentation
// TODO: Needs col-0 classes

// -----------------------------------------------------------------
// -----------------------------------------------------------------
// -----------------------------------------------------------------
// -----------------------------------------------------------------
// Grid and Layout
// -----------------------------------------------------------------
// -----------------------------------------------------------------
// -----------------------------------------------------------------
// -----------------------------------------------------------------

//	Grid controls (see _variables.scss)
//		$grid-number-columns
//			Controls number of columns in grid.
//			Required: Columns must be neatly divisible by 2, 3, and 4.
//			Default: 12
//		$grid-breakpoints
//			The breakpoints you want grids to begin at.
//			Required: Small and medium if you use burf-theme. Large is optional.
//			Default: "small", "medium"
//		$grid-margins
//			Turn on optional margin classes.
//			Default: false
//		$grid-margin-width
//			Your desired grid margin, in %. Default value works out to 20px on large screens.
//			Relies on $grid-margins being set to "true".
//			Default: 2.6
//		$grid-push
//			Turn on optional push classes.
//			Default: false
//		$grid-pull
//			Turn on optional pull classes.
//			Default: false
//		$grid-offset
//			Turn on optional offset classes.
//			Default: false
//		$grid-classes
//			Choose to output numeric grid classes (ie, .col-sm-5)
//			Note that friendly grid classes always print.
//			Default: true

/// The number of columns you would like in your grid.
/// To use styles in burf-theme, you must set this to a number that
/// is divisible by 2, 3, and 4.
/// @group grid
/// @access public
/// @since 1.2.0

$grid-number-columns:                      12 !default;

/// The percentage you'd like a margin to take up on grid items, if you
/// are using margins on grid items.
/// By default, this will attempt to reproduce the default margin on a
/// large screen in a full-width container. If you plan to use grids include
/// a smaller container, you may need to adjust this.
/// @group grid
/// @access public
/// @since 1.2.0

$grid-margin-width:                        ( $margin / $container-lg )*100 !default;

/// Choose which breakpoints you want grid classes to support.
/// Small (sm) and medium (md) are required, everything else is optional.
/// @group grid
/// @access public
/// @since 1.2.0

$grid-breakpoints:                         "xs", "sm", "md", "lg" !default;


/// Determines which classes to calculate and print for the theme.
/// By default, all are on so clients can freely use these in custom CSS.
/// However, you may choose to only support the ones you like in a custom theme.
/// @group grid
/// @access public
/// @since 2.0.0

$grid-supports: (
	margin: 		true, // optional
	push: 		true, // required for the framework
	pull: 		true, // required for the framework
	offset: 		true  // optional
);

/// Choose whether or not to print the numeric grid classes (.col-sm-5). Optional.
/// Note that friendly placeholders (.col-quarter, .col-sm-quarter) will always print.
/// You may wish to disable these on custom themes.
/// @group grid
/// @access public
/// @since 1.2.0

$grid-classes:										 true !default;

// TODO: Grid Spacing

$grid-container-padding:                   20px !default;
$grid-container-padding-large-screen:       60px 20px 0 !default;

/// Controls the margin on rows in the grid.
/// By default, this will attempt to "pull" grid items out
/// by the same amount as their margin, Boostrap-style.
/// @group grid
/// @access public
/// @since 1.0.0

$grid-row-margin:                          0 -$grid-container-padding !default;
$grid-column-padding:                      0 20px !default;
$grid-sidebar-padding:                     0 0 0 60px !default;


/// Base styles for all wrapper elements.
/// @group global
/// @access public
/// @since 1.2.0

%wrapper-styles {
	overflow: hidden;
}

/// Base styles for all container elements.
/// You may wish to extend this on a page where you can't use
/// `.content-container` for some reason - such as on a landing
/// page where you are overriding that class to use the full width
/// of the screen.
/// @group global
/// @access public
/// @since 1.2.0

%container-styles {
	@extend %clearfix;
	margin: 0 auto;
	padding: $grid-container-padding;
	width: 100%;

	@include breakpoint( sm ) {
		max-width: $container-sm;
		padding: $grid-container-padding-large-screen;
	}

	@include breakpoint( md ) {
		max-width: $container-md;
	}

	@include breakpoint( lg ) {
		max-width: $container-lg;
	}
}

/// Base styles for containers that hold grid elements.
/// A negative margin is included to counteract the grid item
/// margins.
/// @group global
/// @access public
/// @since 1.2.0

%row-styles {
	@extend %clearfix;
	margin: $grid-row-margin;

	@include breakpoint( sm ) {
		margin-right: 0;
	}
}

/// Base styles for children of a row.
/// Usually used for grid items.
/// @group global
/// @access public
/// @since 1.2.0

%row-child-styles {
	padding: $grid-column-padding;
}

/// Base styles for a container whose children should
/// be equal heights.
/// @group utilities
/// @access public
/// @since 1.2.0

%equal-height-parent {
	overflow: hidden;
}

/// Base styles for children of the equal-height-parent.
/// These styles will make children appear to be equal heights,
/// even if the actual content is different heights.
/// If you need padding on the bottom of the child items, you might have to adjust
/// the margin-bottom to be lower.
/// @group utilities
/// @access public
/// @since 1.2.0

%equal-height-child {
	@include breakpoint( md ) {
		padding-bottom: 99999px;
		margin-bottom: -99999px;
	}
}

// Additional placeholders are available for the grid. See below for detailed docs.
// Examples: %col-sm-one-half, %col-3, %col-md-6
// Optional: %col-md-margin-6, %col-md-push-6, %col-md-offset-6, %col-md-pull-6

// grid
// -----------------------------------------------------------------

.wrapper {
	@extend %wrapper-styles;
}

.content {
	position: relative;
}

.container {
	@extend %container-styles;
}

.row {
	@extend %row-styles;
}

.row [class*="col-"] {
	@extend %row-child-styles;
}

.row .row:nth-last-of-type(1) {
	margin-bottom: 0;
}

// Grid placeholders

// Builds placeholder classes for the grid.
// Available classes follow the pattern below.

// For your less obvious grid needs:
// 	Basic usage (no breakpoints):
// 		@extend %col-3;
// 	Half column that starts only at medium breakpoints (half of 12):
// 		@extend %col-md-6;

// Optional grid classes are available as well, and may be turned on or off using variables:
// 	Margin: Automatically calculates width with margin included. Handy for items with a background color.
// 		Example: Make something take up 6 columns, starting at medium breakpoint, with margins:
// 		Usage: @extend %col-md-margin-6;
// 	Push: position ___ number of columns to the right (no affect on document flow)
// 		Example: Position something 6 columns to the right without affecting anything else
// 		Usage: @extend %col-md-push-6;
// 	Offset: position ___ number of columns to the right (does affect document flow)
// 		Example: Position something 6 columns to the right and bump everything else along with it
// 		Usage: @extend %col-md-offset-6;
// 	Pull: position ___ number of columns to the pull (does not affect document flow)
// 		Example: Position something 6 columns to the pull without affecting anything else
// 		Usage: @extend %col-md-pull-6;

// Base styles
%col-float {
	float: left;
}

%col-margin-base {
	margin-bottom: $grid-margin-width#{"%"};
	margin-top: 0;
	padding: 20px;
}

%col-noleftmargin {
	margin-left: 0;
}

.col-margin-parent,
%col-margin-parent {
	margin-left: -$grid-margin-width#{"%"};
}

// A helper mixin to build grid styles. No need to use outside this file.
@mixin gridBuild($cssproperty, $amount) {
	#{$cssproperty}: #{$amount}#{"%"};
}

// Initial grid setup
$grid-widths: ();

$grid-widths-margins: ();

@for $i from 0 through $grid-number-columns {
	// Determine current base width
	$percentage: ($i / $grid-number-columns)*100;
	// Create a list of widths for gridBuild to use later
	$grid-widths: append($grid-widths, $percentage, comma);

	$percentage: ($i / $grid-number-columns)*100;
	$grid-widths-margins: append($grid-widths-margins, ($percentage - $grid-margin-width), comma);

	// Create basic grid classes, no breakpoints
	// Example output: %col-1

	@if ($i != 0) {
		%col-#{$i} {
			@extend %col-float;
			@include gridBuild(width, $percentage);
		}
	}
}

@for $i from 0 to length($grid-widths) {
	// Get percentage from earlier
	$percentage: nth($grid-widths, ($i + 1));

	@if map-get($grid-supports, push) {
		%col-push-#{$i} {
			@include gridBuild(left, $percentage);
		}
	}

	@if map-get($grid-supports, pull) {
		%col-pull-#{$i} {
			@include gridBuild(right, $percentage);
		}
	}

	@if map-get($grid-supports, offset) {
		%col-offset-#{$i} {
			@include gridBuild( margin-left, $percentage );
		}
	}

	@if map-get($grid-supports, margin) and ($i != 0) {
		%col-margin-#{$i} {
			@extend %col-margin-base;
			$margin-percentage: nth( $grid-widths-margins, $i + 1 );
			@include gridBuild( width, $margin-percentage );
			float: left;
		}
	}
}


// Breakpoints time

@each $breakpoint in $grid-breakpoints {

	@include breakpoint( $breakpoint, false ) {
		%col-#{$breakpoint}-margin-base {
			margin-left: $grid-margin-width#{"%"};
		}

		.col-#{$breakpoint}-margin-parent,
		%col-#{$breakpoint}-margin-parent {
			margin-left: -$grid-margin-width#{"%"};
		}

		@for $i from 0 to length($grid-widths) {
			// Get percentage from earlier
			$percentage: nth($grid-widths, ($i + 1));

			%col-#{$breakpoint} {
				@if ($i != 0) {
					&-#{$i} {
						@include gridBuild(width, $percentage);
						float: left;
					}
				}

				@if map-get($grid-supports, push) {
					&-push-#{$i} {
						@include gridBuild(left, $percentage);
					}
				}

				@if map-get($grid-supports, pull) {
					&-pull-#{$i} {
						@include gridBuild(right, $percentage);
					}
				}

				@if map-get($grid-supports, offset) {
					&-offset-#{$i} {
						@include gridBuild( margin-left, $percentage );
					}
				}
				@if map-get($grid-supports, margin) and ($i != 0) {
					&-margin-#{$i} {
						$margin-percentage: nth( $grid-widths-margins, $i + 1 );
						@include gridBuild( width, $margin-percentage );
						float: left;
					}
				}
			}
		}
	}

	@for $i from 0 through $grid-number-columns {

		@if map-get($grid-supports, margin) and ($i != 0) {
			// Add to base styles
			%col-#{$breakpoint}-margin-#{$i} {
				@extend %col-margin-base;
				@extend %col-#{$breakpoint}-margin-base;
			}
		}
	}
}

// Friendly placeholders for common needs - calculated based on grid columns
// The classes for these always print, regardless of $grid-classes setting.

$widths: (
	quarter: 		$grid-number-columns * (1/4),
	third: 			$grid-number-columns * (1/3),
	half:				$grid-number-columns * (1/2),
	two-third:		$grid-number-columns * (2/3),
	three-quarter:	$grid-number-columns * (3/4),
	full: 			$grid-number-columns,
	remove: 			0
);

/// Creates friendly classes and placeholders.
/// @example
/// 		Make something take up 1/2 of available space starting at the small breakpoint:
/// 			@extend %col-sm-one-half;
/// 		Make something take up 3/4 of available space starting at the medium breakpoint:
/// 			@extend %col-md-three-quarter;

@each $width, $columns in $widths {
	.col-#{$width},
	%col-#{$width} {
		@extend %col-#{$columns} !optional;
	}

	@each $feature, $supported in $grid-supports {
		@if $supported {
			.col-#{$feature}-#{$width},
			%col-#{$feature}-#{$width} {
				@extend %col-#{$feature}-#{$columns} !optional;
			}
		}
	}

	@each $breakpoint in $grid-breakpoints {
		.col-#{$breakpoint},
		%col-#{$breakpoint} {

			&-#{$width} {
				@extend %col-#{$breakpoint}-#{$columns} !optional;
			}

			@each $feature, $supported in $grid-supports {
				@if $supported {
					&-#{$feature}-#{$width} {
						@extend %col-#{$breakpoint}-#{$feature}-#{$columns} !optional;
					}
				}
			}
		}
	}
}

@if $grid-classes {
	@for $i from 0 through $grid-number-columns {
		.col-#{$i} {
			@extend %col-#{$i} !optional;
		}
		@each $feature, $supported in $grid-supports {
			@if $supported {
				.col-#{$feature}-#{$i} {
					@extend %col-#{$feature}-#{$i} !optional;
				}
			}
		}
		@each $breakpoint in $grid-breakpoints {
			.col-#{$breakpoint} {
				&-#{$i} {
					@extend %col-#{$breakpoint}-#{$i} !optional;
				}

				@each $feature, $supported in $grid-supports {
					@if $supported {
						&-#{$feature}-#{$i} {
							@extend %col-#{$breakpoint}-#{$feature}-#{$i} !optional;
						}
					}
				}
			}
		}
	}
}