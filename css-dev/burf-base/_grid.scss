/* placeholders for theme use
----------------------------------------------------------------- */
%wrapper-styles {
	overflow: hidden;
}
%container-styles {
	width: 100%;
	padding: $grid-container-padding;
	margin: 0 auto;
	@extend %clearfix;
	@include breakpoint(small) {
		max-width: $container-S;
		padding: $grid-container-padding-largeScreen;
	}
	@include breakpoint(medium) {
		max-width: $container-M;
	}
	@include breakpoint(large) {
		max-width: $container-L;
	}
}
%row-styles {
	@extend %clearfix;
	margin: $grid-row-margin;
	@include breakpoint(small) {
		margin-right: 0;
	}
}
%row-child-styles {
	padding: $grid-column-padding;
}
%equal-height-parent {
	overflow: hidden;
}
%equal-height-child {
	@include breakpoint(medium) {
		padding-bottom: 99999px;
		margin-bottom: -99999px;
	}
}

// Additional placeholders are available for the grid. See below for detailed docs.
// Examples: %col-small-one-half, %col-3, %col-medium-6
// Optional: %col-medium-margin-6, %col-medium-push-6, %col-medium-offset-6, %col-medium-pull-6

/* grid
----------------------------------------------------------------- */

.wrapper {
	@extend %wrapper-styles;
}
.content {
	position: relative;
}
.container {
	@extend %container-styles;
}
.row {
	@extend %row-styles;
}
.row [class*="col-"] {
	@extend %row-child-styles;
}
.row .row:nth-last-of-type(1) {
	margin-bottom: 0;
}

/* ---------------------------------------------------------------

Grid placeholders

Builds placeholder classes for the grid.
Available classes follow the pattern below.

Friendly classes for common column needs, avaiable for the following breakpoints and sizes:
	Breakpoints: small, medium
	Sizes: 1/4, 1/3, 1/2, 2/3, 3/4, whole column
	Examples:
		Make something take up 1/2 of available space starting at the small breakpoint:
			@extend %col-small-one-half;
		Make something take up 3/4 of available space starting at the medium breakpoint:
			@extend %col-medium-three-quarter;

For your less obvious grid needs:
	Basic usage (no breakpoints):
		@extend %col-3;
	Half column that starts only at medium breakpoints (half of 12):
		@extend %col-medium-6;

Optional grid classes are available as well, and may be turned on or off using variables:
	Margin: Automatically calculates width with margin included. Handy for items with a background color.
		Example: Make something take up 6 columns, starting at medium breakpoint, with margins:
		Usage: @extend %col-medium-margin-6;
	Push: position ___ number of columns to the left (no affect on document flow)
		Example: Position something 6 columns to the left without affecting anything else
		Usage: @extend %col-medium-push-6;
	Offset: position ___ number of columns to the left (does affect document flow)
		Example: Position something 6 columns to the left and bump everything else along with it
		Usage: @extend %col-medium-offset-6;
	Pull: position ___ number of columns to the right (does not affect document flow)
		Example: Position something 6 columns to the right without affecting anything else
		Usage: @extend %col-medium-pull-6;

Grid controls (see _variables.scss)
	$grid-number-columns
		Controls number of columns in grid.
		Required: Columns must be neatly divisible by 2, 3, and 4.
		Default: 12
	$grid-breakpoints
		The breakpoints you want grids to begin at.
		Required: Small and medium if you use burf-theme. Large is optional.
		Default: "small", "medium"
	$grid-margins
		Turn on optional margin classes.
		Default: false
	$grid-margin-width
		Your desired grid margin, in %. Default value works out to 20px on large screens.
		Relies on $grid-margins being set to "true".
		Default: 2.6
	$grid-push
		Turn on optional push classes.
		Default: false
	$grid-pull
		Turn on optional pull classes.
		Default: false
	$grid-offset
		Turn on optional offset classes.
		Default: false

----------------------------------------------------------------- */

// Base styles
%col-float {
	float: left;
}
%col-base {
	position: relative;
	min-height: 1px;
}
%col-margin-base {
	margin: $grid-margin-width#{"%"};
	margin-top: 0;
	padding: 20px;
	@include breakpoint(small) {
		margin-right: 0;
	}
}

// A helper mixin to build grid styles. No need to use outside this file.
@mixin gridBuild($cssproperty, $amount) {
	#{$cssproperty}: #{$amount}#{"%"};
}

// Initial grid setup
$grid-widths: ();
$grid-widths-margins: ();

@for $i from 1 through $grid-number-columns {
	// Determine current base width
	$percentage: ($i / $grid-number-columns)*100;
	// Create a list of widths for gridBuild to use later
	$grid-widths: append($grid-widths, $percentage, comma);
	// If margins are turned on, also create a list with width excluding margin
	@if $grid-margins {
		$grid-widths-margins: append($grid-widths-margins, ($percentage - $grid-margin-width), comma);
	}
	// Create basic grid classes, no breakpoints
	// Example output: %col-1
	%col-#{$i} {
		@extend %col-base;
		@extend %col-float;
		@include gridBuild(width, $percentage);
	}
}

// Breakpoints time

@each $breakpoint in $grid-breakpoints {
	@for $i from 1 through $grid-number-columns {
		// Add to base styles
		%col-#{$breakpoint} {
			&-#{$i} {
				// Example output: %col-small-1
				@extend %col-base;
			}
			@if $grid-margins {
				&-margin-#{$i} {
					// Example output: %col-small-margin-1
					@extend %col-margin-base;
				}
			}
		}
	}
	@include breakpoint($breakpoint) {
		@for $i from 1 through length($grid-widths) {
			// Get percentage from earlier
			$percentage: nth($grid-widths, $i);

			%col-#{$breakpoint} {
				&-#{$i} {
					// Example output: %col-small-1
					@include gridBuild(width, $percentage);
					float: left;
				}
				@if $grid-margins {
					&-margin-#{$i} {
						// Example output: %col-small-margins-1
						$percentage: nth($grid-widths-margins, $i);
						@include gridBuild(width, $percentage);
						float: left;
					}
				}
				@if $grid-push {
					&-push-#{$i} {
						// Example output: %col-small-push-1
						@include gridBuild(left, $percentage);
						float: left;
					}
				}
				@if $grid-pull {
					&-pull-#{$i} {
						// Example output: %col-small-pull-1
						@include gridBuild(right, $percentage);
						float: left;
					}
				}
				@if $grid-offset {
					&-offset-#{$i} {
						// Example output: %col-small-offset-1
						@include gridBuild(margin-left, $percentage);
						float: left;
					}
				}
			}
		}
	}
}

// Friendly placeholders for common needs - calculated based on grid columns

%col-small {
	&-one-quarter {
		@extend %col-small-#{$grid-number-columns * (1/4)};
	}
	&-one-third {
		@extend %col-small-#{$grid-number-columns * (1/3)};
	}
	&-one-half {
		@extend %col-small-#{$grid-number-columns * (1/2)};
	}
	&-two-third {
		@extend %col-small-#{$grid-number-columns * (2/3)};
	}
	&-three-quarter {
		@extend %col-small-#{$grid-number-columns * (3/4)};
	}
	&-full-width {
		@extend %col-small-#{$grid-number-columns * (1)};
	}
}

%col-medium {
	&-one-quarter {
		@extend %col-medium-#{$grid-number-columns * (1/4)};
	}
	&-one-third {
		@extend %col-medium-#{$grid-number-columns * (1/3)};
	}
	&-one-half {
		@extend %col-medium-#{$grid-number-columns * (1/2)};
	}
	&-two-third {
		@extend %col-medium-#{$grid-number-columns * (2/3)};
	}
	&-three-quarter {
		@extend %col-medium-#{$grid-number-columns * (3/4)};
	}
	&-full-width {
		@extend %col-medium-#{$grid-number-columns * (1)};
	}
	@if $grid-margins {
		&-margin-one-quarter {
			@extend %col-medium-margin-#{$grid-number-columns * (1/4)};
		}
		&-margin-one-third {
			@extend %col-medium-margin-#{$grid-number-columns * (1/3)};
		}
		&-margin-one-half {
			@extend %col-medium-margin-#{$grid-number-columns * (1/2)};
		}
		&-margin-two-third {
			@extend %col-medium-margin-#{$grid-number-columns * (2/3)};
		}
		&-margin-three-quarter {
			@extend %col-medium-margin-#{$grid-number-columns * (3/4)};
		}
		&-margin-full-width {
			@extend %col-medium-margin-#{$grid-number-columns * (1)};
		}
	}
}

/* -----------------------------------------------------------------

Extras

Importing these extra classes is completely optional. You may want
to import these classes if you are using shortcodes in your content
and want to give clients classes to help style those shortcodes.

For theme development purposes, you should extend the placeholder
classes you need in your custom SASS partial. These should only be
within content or widgets in Wordpress.

Nothing in burf-base or burf-theme, nor in Wordpress, is affected by
leaving these classes out. You can safely leave these out if they
are not necessary for your project. By default, they are not imported.

To import, go to your styles.scss file and use the following code
directly underneath the normal burf-theme import:

@import 'burf-theme/extras';

----------------------------------------------------------------- */

/* Classes for layout */

.row {
	.one-quarter,
	.one-third,
	.one-half,
	.two-third,
	.three-quarter,
	.full-width {
		padding: $grid-column-padding;
	}
}

.one-quarter-margin,
.one-third-margin,
.one-half-margin,
.two-third-margin,
.three-quarter-margin,
.full-width-margin {
	background: pink;
	padding: 20px;
}

.one-quarter {
	@extend %col-medium-one-quarter;
}
.one-third {
	@extend %col-medium-one-third;
}
.one-half {
	@extend %col-medium-one-half;
}
.two-third {
	@extend %col-medium-two-third;
}
.three-quarter {
	@extend %col-medium-three-quarter;
}
.full-width {
	@extend %col-medium-full-width;
}

// These classes require $grid-margins in burf-base to be set to true. Default is false.
@if $grid-margins {
	.one-quarter-margin {
		@extend %col-medium-margin-one-quarter;
	}
	.one-third-margin {
		@extend %col-medium-margin-one-third;
	}
	.one-half-margin {
		@extend %col-medium-margin-one-half;
	}
	.two-third-margin {
		@extend %col-medium-margin-two-third;
	}
	.three-quarter-margin {
		@extend %col-medium-margin-three-quarter;
	}
	.full-width-margin {
		@extend %col-medium-margin-full-width;
	}
}

.equal-height {
	@extend %equal-height-parent;

	.one-quarter-margin {
		@extend %equal-height-child;
	}
}