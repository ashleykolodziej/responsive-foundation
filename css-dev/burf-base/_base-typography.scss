// =================================================================
// Typography
// =================================================================

// Links
// -----------------------------------------------------------------

/// Controls base styling for all links.
/// @group global
/// @access public
/// @since 1.0.0

a {
	color: $color-link;

	&:visited {
		color: $color-link-visited;
	}

	// Improve readability when focused and also mouse hovered in all browsers.
	&:hover,
	&:active {
		text-decoration: none;
	}

	h1 &,
	h2 &,
	h3 &,
	h4 &,
	h5 &,
	h6 & {
		color: inherit;
	}
}

// Headings
// -----------------------------------------------------------------

// TODO: Come back to these when we rework variables and generate similar to grid based on map

$_depth-headings: 6;

$min-font-size: $font-size-base;
$max-font-size: 55px;

$min-line-height: 1.15;
$max-line-height: $line-height-base;

$h: $_depth-headings;

// Adjusts the rate of growth between font sizes.
// 1 is a completely even rate of growth.
// Higher numbers will grow the font size exponentially. This is the way
// most type scales are set up.
// A higher number will adjust the font size more dramatically at larger sizes.
// By default, this is optimized for heavy use of h1-h4, and minimal use of h5 and h6.

$growth-rate: 3.5;

// Calculate the multiplier needed for growth between a minimum and maximum value
// based on a given rate of growth.

@function calc-scale ( $min, $max, $steps, $rate ) {
	@return ( $max - $min ) / pow( $steps, $rate );
}

$_scale: calc-scale( $min-font-size, $max-font-size, $_depth-headings, $growth-rate );

// Calculates a font size in ems, relative to the base font size.
// Use scaled if your minimums and maximums are already scaled units.
// For example, you may use scaled with line-height, or if you specify
// your mins and maxes in ems for font size.
// Otherwise, use as is to divide by your minimum and come up with the
// correct ratio to convert your font to a scaled size. This is great for
// converting pixels to ems.

@function calc-size( $level, $rate, $scale, $min, $scaled: false ) {
	@if $scaled {
		@return pow( ( $level ), $rate ) * $scale + $min;
	} @else {
		@return ( pow( ( $level ), $rate ) * $scale + $min ) / $min;
	}
}

$_lh-scale: calc-scale( $min-line-height, $max-line-height, $_depth-headings, $growth-rate );

$font-styles: (
	"aside": (
		"font-size": 16px,
		"line-height": $min-line-height
	),
	"minimum": (
		"font-size": 13px,
		"line-height": $min-line-height
	)
);

@while $h >= 0 {
	$font-style: ();
	$size: null;
	$lh: null;
	$name: null;
	$heading-name: $_depth-headings - $h;

	@if $h == 0 {
		$size: $min-font-size / $font-size-base + em;
	} @else {
		$size: calc-size( $h + 1, $growth-rate, $_scale, $min-font-size ) + em;
	}

	@if $h == $_depth-headings {
		$lh: $min-line-height;
		$name: "maximum";
	} @else {
		$lh: calc-size( $heading-name, $growth-rate, $_lh-scale, $min-line-height, true );
		$name: $heading-name;
	}

	$font-style: (
		"#{$name}": (
			"font-size": $size,
			"line-height": $lh
		)
	);

	$font-styles: map_merge( $font-styles, $font-style );

	$h: $h - 1;
}

@each $style, $settings in $font-styles {
	.font-size-#{$style},
	%font-size-#{$style} {
		font-size: map-get( $settings, "font-size" );
		line-height: map-get( $settings, "line-height" );;
	}
}

/// Controls base styles for all heading tags.
/// @group global
/// @access public
/// @since 1.0.0

%heading-base {
	color: $color-heading;
	font-family: $font-family-heading;
	margin-top: 1em;
	margin-bottom: .6em;

	&:first-child {
		margin-top: 0;
	}

	small {
		color: $color-heading-small;
		font-size: 0.75em;
		font-weight: normal;
	}
}

/// Styles for all h1 tags.
/// @group global
/// @access public
/// @since 1.0.0

h1 {
	@extend %heading-base;
	@extend %font-size-1;
}

/// Styles for all h2 tags.
/// @group global
/// @access public
/// @since 1.0.0

h2 {
	@extend %heading-base;
	@extend %font-size-2;
}

/// Styles for all h3 tags.
/// @group global
/// @access public
/// @since 1.0.0

h3 {
	@extend %heading-base;
	@extend %font-size-3;
}

/// Styles for all h4 tags.
/// @group global
/// @access public
/// @since 1.0.0

h4 {
	@extend %heading-base;
	@extend %font-size-4;
}

/// Styles for all h5 tags.
/// @group global
/// @access public
/// @since 1.0.0

h5 {
	@extend %heading-base;
	@extend %font-size-5;
}

/// Styles for all h6 tags.
/// @group global
/// @access public
/// @since 1.0.0

h6 {
	@extend %heading-base;
	@extend %font-size-6;
}

// Adds the help cursor on hover to abbreviations
abbr[title] {
	cursor: help;
}

/// Styles for all blockquotes.
/// @group global
/// @access public
/// @since 1.0.0

blockquote {
	margin: $font-margin-blockquote;
}

/// Styles for all paragraphs and preformatted content.
/// @group global
/// @access public
/// @since 1.0.0

p,
pre {
	margin: $font-margin-base;
}

/// Styles for all preformatted and code content.
/// @group global
/// @access public
/// @since 1.0.0

code,
kbd,
pre,
samp {
	font-family: $font-family-monospace;
	font-size: $font-size-base;
}

// Always hide an element when it has the `hidden` HTML attribute.
[hidden] {
	display: none !important;
}

// Lists
// -----------------------------------------------------------------

/// Styles for all lists and list-like content.
/// @group global
/// @access public
/// @since 1.0.0

dl,
menu,
ol,
ul {
	margin: $font-margin-list;
}

/// Styles for definition stuff.
/// @group global
/// @access public
/// @since 1.0.0

dd {
	margin: $font-margin-dd;
}

/// Styles menus and lists.
/// @group global
/// @access public
/// @since 1.0.0

menu,
ol,
ul {
	padding: $font-padding-list;
}

/// Styles for navigation.
/// @group global
/// @access public
/// @since 1.0.0

nav {
	ul,
	ol {
		margin: 0;
		padding: 0;
	}
}

// remove margin from nested lists
ul ul,
ul ol,
ol ul,
ol ol {
	margin: 0;
}

// Code
// -----------------------------------------------------------------

/// Styles for code element.
/// @group global
/// @access public
/// @since 1.0.0

code {
	background: $color-code-bg;
	color: $color-code;
	padding: $font-padding-code;
	white-space: nowrap;
}

/// Styles for the code wrapper class.
/// Adding this class around a code element enables scrolling on mobile devices.
/// @group global
/// @access public
/// @since 1.0.0

.code {
	background: $color-code-bg;
	border: 1px solid $color-grayscale-e;
	margin: $font-margin-code;
	-webkit-overflow-scrolling: touch;
	overflow-x: auto;
	padding: 20px;

	& + & {
		margin-top: -15px;
	}

	code {
		background: none;
		font-size: 95%;
		padding: 0;
		white-space: pre;
		word-wrap: normal;
	}
}
