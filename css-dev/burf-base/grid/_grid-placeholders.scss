// =================================================================
// Grid Styles and Placeholders
// =================================================================

/// Base styles for all wrapper elements.
/// @group global
/// @access public
/// @since 1.2.0

%wrapper-styles {
	overflow: hidden;
}

/// Base styles for all container elements.
/// You may wish to extend this on a page where you can't use
/// `.content-container` for some reason - such as on a landing
/// page where you are overriding that class to use the full width
/// of the screen.
/// @group global
/// @access public
/// @since 1.2.0

%container-styles {
	@extend %clearfix;
	margin: 0 auto;
	padding: $grid-container-padding;
	width: 100%;

	@include breakpoint( $sm ) {
		max-width: $container-sm;
		padding: $grid-container-padding-desktop;
	}

	@include breakpoint( $md ) {
		max-width: $container-md;
	}

	@include breakpoint( $lg ) {
		max-width: $container-lg;
	}
}

/// Base styles for containers that hold grid elements.
/// A negative margin is included to counteract the grid item
/// margins.
/// @group global
/// @access public
/// @since 1.2.0

%row-styles {
	@extend %clearfix;
	margin: $grid-row-margin;

	@include breakpoint( $sm ) {
		margin-right: 0;
	}
}

/// Base styles for children of a row.
/// Usually used for grid items.
/// @group global
/// @access public
/// @since 1.2.0

%row-child-styles {
	padding: $grid-column-padding;
}

/// A backwards-compatible equal heights solution for
/// older browsers.
/// Base styles for a container whose children should
/// be equal heights.
/// @group utilities
/// @access public
/// @since 1.2.0

%equal-height-parent-backcompat {
	overflow: hidden;
}

/// A backwards-compatible equal heights solution for
/// older browsers.
/// Base styles for children of the equal-height-parent.
/// These styles will make children appear to be equal heights,
/// even if the actual content is different heights.
/// If you need padding on the bottom of the child items, you might have to adjust
/// the margin-bottom to be lower.
/// @group utilities
/// @access public
/// @since 1.2.0

%equal-height-child-backcompat {
	@include breakpoint( $md ) {
		padding-bottom: 99999px;
		margin-bottom: -99999px;
	}
}

/// A newer version of equal heights that takes advantage
/// of flexbox. Use this on your container to make all
/// children equal heights. Plays nice with the grid.
/// Check https://caniuse.com/#search=flexbox for browser
/// support. You may want to provide a min-height on a
/// case by case basis as a fallback.
/// @group utilities
/// @access public
/// @since 2.0.0

%equal-heights {
	display: flex;
	flex-wrap: wrap;
}

// Grid placeholders

// Builds placeholder classes for the grid.
// Available classes follow the pattern below.

// For your less obvious grid needs:
// 	Basic usage (no breakpoints):
// 		@extend %col-3;
// 	Half column that starts only at medium breakpoints (half of 12):
// 		@extend %col-md-6;

// Optional grid classes are available as well, and may be turned on or off using variables:
// 	Margin: Automatically calculates width with margin included. Handy for items with a background color.
// 		Example: Make something take up 6 columns, starting at medium breakpoint, with margins:
// 		Usage: @extend %col-md-margin-6;
// 	Push: position ___ number of columns to the right (no affect on document flow)
// 		Example: Position something 6 columns to the right without affecting anything else
// 		Usage: @extend %col-md-push-6;
// 	Offset: position ___ number of columns to the right (does affect document flow)
// 		Example: Position something 6 columns to the right and bump everything else along with it
// 		Usage: @extend %col-md-offset-6;
// 	Pull: position ___ number of columns to the pull (does not affect document flow)
// 		Example: Position something 6 columns to the pull without affecting anything else
// 		Usage: @extend %col-md-pull-6;

// Base styles
%col-base {
	@include col-base;
}

%col-float {
	@include col-float;
}

%col-margin-base {
	@include col-margin-base;
}

%col-noleftmargin {
	margin-left: 0;
}

.col-margin-parent,
%col-margin-parent {
	margin-left: -$grid-margin-width#{"%"};
}

@each $breakpoint, $value in $grid-breakpoints {
	.col-#{$breakpoint}-margin-parent,
	%col-#{$breakpoint}-margin-parent {
		@include breakpoint( $value, false ) {
			margin-left: -$grid-margin-width#{"%"};
		}
	}
}

// Initial grid setup
$grid-widths: ();

$grid-widths-margins: ();

@for $i from 0 through $grid-number-columns {
	// Determine current base width
	$percentage: ($i / $grid-number-columns)*100;
	// Create a list of widths for grid-build to use later
	$grid-widths: append($grid-widths, $percentage, comma);

	$percentage: ($i / $grid-number-columns)*100;
	$grid-widths-margins: append($grid-widths-margins, ($percentage - $grid-margin-width), comma);

	// Create basic grid classes, no breakpoints
	// Example output: %col-1

	@if ($i != 0) {
		%col-#{$i} {
			@extend %col-base;
			@extend %col-float;
			@include grid-build(width, $percentage);
		}
	}
}

// Test 2: ? lines

@for $i from 0 to length($grid-widths) {
	@each $feature, $supported in $grid-supports {
		@if ( $supported ) {
			%col-#{$feature}-#{$i} {
				@extend %col-base;
				@extend %col-#{$feature}-base !optional;
				@include col( '', $feature, $i, false );
			}
		}
	}
}

@each $breakpoint, $value in $grid-breakpoints {
	@include breakpoint( $value, false ) {
		@for $i from 0 to length($grid-widths) {
			%col-#{$breakpoint}-#{$i} {
				//@include col( $value, '', $i, false );
				@include grid-styles( '', $i );
			}
		}

		@each $feature, $supported in $grid-supports {
			@if ( $supported ) {
				@for $i from 0 to length($grid-widths) {
					%col-#{$breakpoint}-#{$feature}-#{$i} {
						@extend %col-#{$breakpoint}-#{$feature}-base !optional;
						//@include col( $value, $feature, $i, false );
						@include grid-styles( $feature, $i );
					}
				}
			}
		}
	}
}